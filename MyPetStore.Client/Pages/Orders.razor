@page "/my-orders"
@inject IOrderApi OrderApi
<div class="container">
    <h3 class="mt-3">Orders</h3>

    @if (isBusy)
    {
        <div class="text-center lead mt-5 text-primary">
            Cargando...
        </div>
    }
    else
    {
        foreach (var o in orders)
        {
            <div class="card card-body">
                <div class="d-flex justify-content-between h4">
                    <div>#@o.Id</div>
                    <div>@o.Estatus</div>
                </div>
                <hr />
                @foreach (var p in o.Products)
                {
                    <div class="d-flex mb-5">
                        <div>
                            @if (string.IsNullOrEmpty(p.ImageUrl))
                            {
                                <img src="/images/placeholder.png" width="80" class="img-thumbnail" />
                            }
                            else
                            {
                                <img src="@p.ImageUrl" width="80" class="img-thumbnail" />
                            }
                        </div>
                        <div class="ml-3">
                            <div class="lead">@p.Name</div> 
                            <label>Quantity:</label> <input class="form-control" value="@p.Quantity" @onchange="(ev) => ChangeQuantity(ev, p.Id)" />
                        </div>
                    </div>
                }
                <hr />
                <div class="lead text-right">Total: @o.Total.ToString("C2")</div>
            </div>
        }
    }
</div>

@code {
    private bool isBusy;
    private List<OrderDto> orders = new();
    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        try
        {
            orders = await OrderApi.GetMyOrders();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        isBusy = false;
    }

    async Task ChangeQuantity(ChangeEventArgs ev, int productId)
    {
        // TODO: enviar el cambio al API
        Console.WriteLine($"product {productId} quantity {ev.Value}");
    }
}